{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/kaito/Udemy/react-native-ios-android/section15/MemoApp/src/screens/MemoCreateScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport firebase from \"firebase\";\nimport CircleButton from \"../elements/CircleButton\";\n\nvar MemoCreateScreen = function (_React$Component) {\n  _inherits(MemoCreateScreen, _React$Component);\n\n  var _super = _createSuper(MemoCreateScreen);\n\n  function MemoCreateScreen() {\n    var _this;\n\n    _classCallCheck(this, MemoCreateScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      body: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(MemoCreateScreen, [{\n    key: \"handlePress\",\n    value: function handlePress() {\n      var db = firebase.firestore();\n\n      var _firebase$auth = firebase.auth(),\n          currentUser = _firebase$auth.currentUser;\n\n      console.log(db);\n      db.collection(\"users/\" + currentUser.uid + \"/memos\").add({\n        body: this.state.body,\n        createdOn: new Date()\n      }).then(function (docRef) {\n        console.log(\"success\", docRef.id);\n      }).catch(function (error) {\n        console.log(\"error\", error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.conteiner\n      }, React.createElement(TextInput, {\n        style: styles.memoEditInput,\n        multiline: true,\n        value: this.state.body,\n        onChangeText: function onChangeText(text) {\n          _this2.setState({\n            body: text\n          });\n        }\n      }), React.createElement(CircleButton, {\n        name: \"check\",\n        onPress: this.handlePress.bind(this)\n      }));\n    }\n  }]);\n\n  return MemoCreateScreen;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  conteiner: {\n    flex: 1,\n    width: \"100%\"\n  },\n  memoEditInput: {\n    backgroundColor: \"#fff\",\n    flex: 1,\n    paddingTop: 32,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 16,\n    fontSize: 16\n  }\n});\nexport default MemoCreateScreen;","map":{"version":3,"sources":["/Users/kaito/Udemy/react-native-ios-android/section15/MemoApp/src/screens/MemoCreateScreen.js"],"names":["React","firebase","CircleButton","MemoCreateScreen","state","body","db","firestore","auth","currentUser","console","log","collection","uid","add","createdOn","Date","then","docRef","id","catch","error","styles","conteiner","memoEditInput","text","setState","handlePress","bind","Component","StyleSheet","create","flex","width","backgroundColor","paddingTop","paddingLeft","paddingRight","paddingBottom","fontSize"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,OAAOC,QAAP,MAAqB,UAArB;AAEA,OAAOC,YAAP;;IAEMC,gB;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE;AADA,K;;;;;;kCAIM;AACZ,UAAMC,EAAE,GAAGL,QAAQ,CAACM,SAAT,EAAX;;AADY,2BAEYN,QAAQ,CAACO,IAAT,EAFZ;AAAA,UAEJC,WAFI,kBAEJA,WAFI;;AAGZC,MAAAA,OAAO,CAACC,GAAR,CAAYL,EAAZ;AAEAA,MAAAA,EAAE,CAACM,UAAH,YAAuBH,WAAW,CAACI,GAAnC,aACGC,GADH,CACO;AACHT,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IADd;AAEHU,QAAAA,SAAS,EAAE,IAAIC,IAAJ;AAFR,OADP,EAKGC,IALH,CAKQ,UAACC,MAAD,EAAY;AAChBR,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBO,MAAM,CAACC,EAA9B;AACD,OAPH,EAQGC,KARH,CAQS,UAACC,KAAD,EAAW;AAChBX,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBU,KAArB;AACD,OAVH;AAWD;;;6BAEQ;AAAA;;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC;AAApB,SACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAED,MAAM,CAACE,aADhB;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,KAAK,EAAE,KAAKpB,KAAL,CAAWC,IAHpB;AAIE,QAAA,YAAY,EAAE,sBAACoB,IAAD,EAAU;AACtB,UAAA,MAAI,CAACC,QAAL,CAAc;AAAErB,YAAAA,IAAI,EAAEoB;AAAR,WAAd;AACD;AANH,QADF,EASE,oBAAC,YAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,OAAO,EAAE,KAAKE,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB;AAFX,QATF,CADF;AAmBD;;;;EA3C4B5B,KAAK,CAAC6B,S;;AA8CrC,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,KAAK,EAAE;AAFE,GADoB;AAK/BT,EAAAA,aAAa,EAAE;AACbU,IAAAA,eAAe,EAAE,MADJ;AAEbF,IAAAA,IAAI,EAAE,CAFO;AAGbG,IAAAA,UAAU,EAAE,EAHC;AAIbC,IAAAA,WAAW,EAAE,EAJA;AAKbC,IAAAA,YAAY,EAAE,EALD;AAMbC,IAAAA,aAAa,EAAE,EANF;AAObC,IAAAA,QAAQ,EAAE;AAPG;AALgB,CAAlB,CAAf;AAgBA,eAAepC,gBAAf","sourcesContent":["import React from \"react\";\nimport { StyleSheet, View, TextInput } from \"react-native\";\nimport firebase from \"firebase\";\n\nimport CircleButton from \"../elements/CircleButton\";\n\nclass MemoCreateScreen extends React.Component {\n  state = {\n    body: \"\",\n  };\n\n  handlePress() {\n    const db = firebase.firestore();\n    const { currentUser } = firebase.auth();\n    console.log(db);\n    // firebaseから直接取得する\n    db.collection(`users/${currentUser.uid}/memos`)\n      .add({\n        body: this.state.body,\n        createdOn: new Date(),\n      })\n      .then((docRef) => {\n        console.log(\"success\", docRef.id);\n      })\n      .catch((error) => {\n        console.log(\"error\", error);\n      });\n  }\n\n  render() {\n    return (\n      <View style={styles.conteiner}>\n        <TextInput\n          style={styles.memoEditInput}\n          multiline\n          value={this.state.body}\n          onChangeText={(text) => {\n            this.setState({ body: text });\n          }}\n        />\n        <CircleButton\n          name=\"check\"\n          onPress={this.handlePress.bind(this)}\n          //   onPress={() => {\n          //     this.props.navigation.goBack();\n          //   }}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  conteiner: {\n    flex: 1,\n    width: \"100%\",\n  },\n  memoEditInput: {\n    backgroundColor: \"#fff\",\n    flex: 1,\n    paddingTop: 32,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 16,\n    fontSize: 16,\n  },\n});\n\nexport default MemoCreateScreen;\n"]},"metadata":{},"sourceType":"module"}