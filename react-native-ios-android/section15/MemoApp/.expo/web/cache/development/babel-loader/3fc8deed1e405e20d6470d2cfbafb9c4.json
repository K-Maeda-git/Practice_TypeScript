{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/kaito/Udemy/react-native-ios-android/section15/MemoApp/src/screens/MemoListScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport firebase from \"firebase\";\nimport MemoList from \"../components/MemoList\";\nimport CircleButton from \"../elements/CircleButton\";\n\nvar MemoListScreen = function (_React$Component) {\n  _inherits(MemoListScreen, _React$Component);\n\n  var _super = _createSuper(MemoListScreen);\n\n  function MemoListScreen() {\n    var _this;\n\n    _classCallCheck(this, MemoListScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      memoList: []\n    };\n    return _this;\n  }\n\n  _createClass(MemoListScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var db = firebase.firestore();\n\n      var _firebase$auth = firebase.auth(),\n          currentUser = _firebase$auth.currentUser;\n\n      db.collection(\"users/\" + currentUser.uid + \"/memos\").onSnapshot(function (snapshot) {\n        var memoList = [];\n        snapshot.forEach(function (doc) {\n          memoList.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n            key: doc.id\n          }));\n        });\n\n        _this2.setState({\n          memoList: memoList\n        });\n      });\n    }\n  }, {\n    key: \"handlePress\",\n    value: function handlePress() {\n      this.props.navigation.navigate(\"MemoCreate\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.conteiner\n      }, React.createElement(MemoList, {\n        memoList: this.state.memoList,\n        navigation: this.props.navigation\n      }), React.createElement(CircleButton, {\n        name: \"plus\",\n        onPress: this.handlePress.bind(this)\n      }));\n    }\n  }]);\n\n  return MemoListScreen;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  conteiner: {\n    flex: 1,\n    width: \"100%\",\n    backgroundColor: \"#FFFDF6\"\n  }\n});\nexport default MemoListScreen;","map":{"version":3,"sources":["/Users/kaito/Udemy/react-native-ios-android/section15/MemoApp/src/screens/MemoListScreen.js"],"names":["React","firebase","MemoList","CircleButton","MemoListScreen","state","memoList","db","firestore","auth","currentUser","collection","uid","onSnapshot","snapshot","forEach","doc","push","data","key","id","setState","props","navigation","navigate","styles","conteiner","handlePress","bind","Component","StyleSheet","create","flex","width","backgroundColor"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAGA,OAAOC,QAAP,MAAqB,UAArB;AAEA,OAAOC,QAAP;AACA,OAAOC,YAAP;;IAEMC,c;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE;AADJ,K;;;;;;wCAIY;AAAA;;AAClB,UAAMC,EAAE,GAAGN,QAAQ,CAACO,SAAT,EAAX;;AADkB,2BAEMP,QAAQ,CAACQ,IAAT,EAFN;AAAA,UAEVC,WAFU,kBAEVA,WAFU;;AAGlBH,MAAAA,EAAE,CAACI,UAAH,YAAuBD,WAAW,CAACE,GAAnC,aACGC,UADH,CACc,UAACC,QAAD,EAAc;AACxB,YAAMR,QAAQ,GAAG,EAAjB;AACAQ,QAAAA,QAAQ,CAACC,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBV,UAAAA,QAAQ,CAACW,IAAT,iCAAmBD,GAAG,CAACE,IAAJ,EAAnB;AAA+BC,YAAAA,GAAG,EAAEH,GAAG,CAACI;AAAxC;AACD,SAFD;;AAGA,QAAA,MAAI,CAACC,QAAL,CAAc;AAAEf,UAAAA,QAAQ,EAARA;AAAF,SAAd;AACD,OAPH;AA6BD;;;kCAEa;AACZ,WAAKgB,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+B,YAA/B;AACD;;;6BAEQ;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC;AAApB,SACE,oBAAC,QAAD;AACE,QAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWC,QADvB;AAEE,QAAA,UAAU,EAAE,KAAKgB,KAAL,CAAWC;AAFzB,QADF,EAKE,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAC,MAAnB;AAA0B,QAAA,OAAO,EAAE,KAAKI,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB;AAAnC,QALF,CADF;AASD;;;;EArD0B5B,KAAK,CAAC6B,S;;AAwDnC,IAAMJ,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,eAAe,EAAE;AAHR;AADoB,CAAlB,CAAf;AAQA,eAAe9B,cAAf","sourcesContent":["import React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\nimport firebase from \"firebase\";\n\nimport MemoList from \"../components/MemoList\";\nimport CircleButton from \"../elements/CircleButton\";\n\nclass MemoListScreen extends React.Component {\n  state = {\n    memoList: [],\n  };\n\n  componentDidMount() {\n    const db = firebase.firestore();\n    const { currentUser } = firebase.auth();\n    db.collection(`users/${currentUser.uid}/memos`)\n      .onSnapshot((snapshot) => {\n        const memoList = [];\n        snapshot.forEach((doc) => {\n          memoList.push({ ...doc.data(), key: doc.id });\n        });\n        this.setState({ memoList });\n      });\n\n  // componentDidMount() {\n  //   console.log(\"TEST->DidMount\");\n  //   const { currentUser } = firebase.auth();\n  //   const db = firebase.firestore();\n  //   db.collection(\"users/${currentUser.uid}/memos\")\n  //     .get()\n  //     .then((snapshot) => {\n  //       const memoList = [];\n  //       console.log(snapshot);\n  //       snapshot.forEach((doc) => {\n  //         console.log(doc.data());\n  //         // memoList.push(doc.data());\n  //         // memoList.push({ body: 'test', createdOn: '2021-01-25', key: doc.id});\n  //         memoList.push({ ...doc.data(), key: doc.id });\n  //       });\n  //       this.setState({ memoList });\n  //     })\n  //     .catch((error) => {\n  //       console.log(error);\n  //     });\n  }\n\n  handlePress() {\n    this.props.navigation.navigate(\"MemoCreate\");\n  }\n\n  render() {\n    return (\n      <View style={styles.conteiner}>\n        <MemoList\n          memoList={this.state.memoList}\n          navigation={this.props.navigation}\n        />\n        <CircleButton name=\"plus\" onPress={this.handlePress.bind(this)} />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  conteiner: {\n    flex: 1,\n    width: \"100%\",\n    backgroundColor: \"#FFFDF6\",\n  },\n});\n\nexport default MemoListScreen;\n"]},"metadata":{},"sourceType":"module"}