{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/kaito/Udemy/react-native-ios-android/section15/MemoApp/src/elements/CircleButton.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport * as Font from \"expo-font\";\nimport { createIconSet } from \"@expo/vector-icons\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport fontAwesome from \"../../assets/fonts/fa-solid-900.ttf\";\nvar CustomIcon = createIconSet({\n  pencile: \"\\uF304\",\n  plus: \"\\uF067\",\n  check: \"\\uF00C\"\n}, \"FontAwesome\");\n\nvar CircleButton = function (_React$Component) {\n  _inherits(CircleButton, _React$Component);\n\n  var _super = _createSuper(CircleButton);\n\n  function CircleButton() {\n    var _this;\n\n    _classCallCheck(this, CircleButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      fontLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(CircleButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                FontAwesome: fontAwesome\n              }));\n\n            case 2:\n              this.setState({\n                fontLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          name = _this$props.name,\n          style = _this$props.style,\n          color = _this$props.color,\n          onPress = _this$props.onPress;\n      var bgColor = \"#E31676\";\n      var textColor = \"#fff\";\n\n      if (color === \"white\") {\n        bgColor = \"#fff\";\n        textColor = \"#E31676\";\n      }\n\n      return React.createElement(TouchableHighlight, {\n        style: [styles.container, style],\n        onPress: onPress,\n        underlayColor: \"transparent\"\n      }, React.createElement(View, {\n        style: [styles.circleButton, {\n          backgroundColor: bgColor\n        }]\n      }, this.state.fontLoaded ? React.createElement(CustomIcon, {\n        name: name,\n        style: [styles.circleButtonTitle, {\n          color: textColor\n        }]\n      }) : null));\n    }\n  }]);\n\n  return CircleButton;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    width: 48,\n    height: 48,\n    position: 'absolute',\n    bottom: 32,\n    right: 32\n  },\n  circleButton: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    justifyContent: 'center',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 3\n  },\n  circleButtonTitle: {\n    fontSize: 24,\n    lineHeight: 32\n  }\n});\nexport default CircleButton;","map":{"version":3,"sources":["/Users/kaito/Udemy/react-native-ios-android/section15/MemoApp/src/elements/CircleButton.js"],"names":["React","Font","createIconSet","fontAwesome","CustomIcon","pencile","plus","check","CircleButton","state","fontLoaded","loadAsync","FontAwesome","setState","props","name","style","color","onPress","bgColor","textColor","styles","container","circleButton","backgroundColor","circleButtonTitle","Component","StyleSheet","create","width","height","position","bottom","right","borderRadius","justifyContent","alignItems","shadowColor","shadowOffset","shadowOpacity","shadowRadius","fontSize","lineHeight"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA,SAASC,aAAT,QAA8B,oBAA9B;;;;AAEA,OAAOC,WAAP;AAEA,IAAMC,UAAU,GAAGF,aAAa,CAC9B;AACEG,EAAAA,OAAO,EAAE,QADX;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,KAAK,EAAE;AAHT,CAD8B,EAM9B,aAN8B,CAAhC;;IASMC,Y;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,UAAU,EAAE;AADN,K;;;;;;;;;;;;+CAMAT,IAAI,CAACU,SAAL,CAAe;AACnBC,gBAAAA,WAAW,EAAET;AADM,eAAf,C;;;AAGN,mBAAKU,QAAL,CAAc;AAAEH,gBAAAA,UAAU,EAAE;AAAd,eAAd;;;;;;;;;;;6BAGO;AAAA,wBAIiC,KAAKI,KAJtC;AAAA,UAICC,IAJD,eAICA,IAJD;AAAA,UAIOC,KAJP,eAIOA,KAJP;AAAA,UAIcC,KAJd,eAIcA,KAJd;AAAA,UAIqBC,OAJrB,eAIqBA,OAJrB;AAMP,UAAIC,OAAO,GAAG,SAAd;AACA,UAAIC,SAAS,GAAG,MAAhB;;AAGA,UAAIH,KAAK,KAAK,OAAd,EAAuB;AACrBE,QAAAA,OAAO,GAAG,MAAV;AACAC,QAAAA,SAAS,GAAG,SAAZ;AACD;;AAED,aACE,oBAAC,kBAAD;AAAoB,QAAA,KAAK,EAAE,CAACC,MAAM,CAACC,SAAR,EAAmBN,KAAnB,CAA3B;AAAsD,QAAA,OAAO,EAAEE,OAA/D;AAAwE,QAAA,aAAa,EAAC;AAAtF,SAEE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CAACG,MAAM,CAACE,YAAR,EAAsB;AAAEC,UAAAA,eAAe,EAAEL;AAAnB,SAAtB;AADT,SAGG,KAAKV,KAAL,CAAWC,UAAX,GACC,oBAAC,UAAD;AACE,QAAA,IAAI,EAAEK,IADR;AAEE,QAAA,KAAK,EAAE,CAACM,MAAM,CAACI,iBAAR,EAA2B;AAAER,UAAAA,KAAK,EAAEG;AAAT,SAA3B;AAFT,QADD,GAOG,IAVN,CAFF,CADF;AAiBD;;;;EA7CwBpB,KAAK,CAAC0B,S;;AAgDjC,IAAML,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,KAAK,EAAE,EADE;AAETC,IAAAA,MAAM,EAAE,EAFC;AAGTC,IAAAA,QAAQ,EAAE,UAHD;AAITC,IAAAA,MAAM,EAAE,EAJC;AAKTC,IAAAA,KAAK,EAAE;AALE,GADoB;AAQ/BV,EAAAA,YAAY,EAAE;AACZM,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,MAAM,EAAE,EAFI;AAIZI,IAAAA,YAAY,EAAE,EAJF;AAKZC,IAAAA,cAAc,EAAE,QALJ;AAMZC,IAAAA,UAAU,EAAE,QANA;AAOZC,IAAAA,WAAW,EAAE,MAPD;AAQZC,IAAAA,YAAY,EAAE;AAAET,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,MAAM,EAAE;AAApB,KARF;AASZS,IAAAA,aAAa,EAAE,GATH;AAUZC,IAAAA,YAAY,EAAE;AAVF,GARiB;AAqB/Bf,EAAAA,iBAAiB,EAAE;AAEjBgB,IAAAA,QAAQ,EAAE,EAFO;AAIjBC,IAAAA,UAAU,EAAE;AAJK;AArBY,CAAlB,CAAf;AA6BA,eAAelC,YAAf","sourcesContent":["import React from \"react\";\nimport * as Font from \"expo-font\";\n\nimport { createIconSet } from \"@expo/vector-icons\";\nimport { StyleSheet, View, TouchableHighlight } from \"react-native\";\nimport fontAwesome from \"../../assets/fonts/fa-solid-900.ttf\";\n\nconst CustomIcon = createIconSet(\n  {\n    pencile: \"\\uf304\",\n    plus: \"\\uf067\",\n    check: \"\\uf00c\",\n  },\n  \"FontAwesome\",\n);\n\nclass CircleButton extends React.Component {\n  state = {\n    fontLoaded: false,\n  };\n\n  async componentDidMount() {\n    // フォントを読み込む\n    await Font.loadAsync({\n      FontAwesome: fontAwesome,\n    });\n    this.setState({ fontLoaded: true });\n  }\n\n  render() {\n    // 他で定義したスタイルを適用することができる\n    // {}で囲うことでthis.propsの中のstyleというオブジェクトを指定して抜き出す\n    // やっていることは「const style = this.props.style;」と一緒\n    const { name, style, color, onPress } = this.props;\n\n    let bgColor = \"#E31676\";\n    let textColor = \"#fff\";\n\n    // 渡ってきたcolorが\"white\"であれば色を変更する\n    if (color === \"white\") {\n      bgColor = \"#fff\";\n      textColor = \"#E31676\";\n    }\n\n    return (\n      <TouchableHighlight style={[styles.container, style]} onPress={onPress} underlayColor=\"transparent\">\n        {/* // 配列として定義したスタイルを渡すことで上書きする */}\n        <View\n          style={[styles.circleButton, { backgroundColor: bgColor }]}\n        >\n          {this.state.fontLoaded ? (\n            <CustomIcon\n              name={name}\n              style={[styles.circleButtonTitle, { color: textColor }]}\n            />\n            //  親から渡ってきた要素を表示する\n            //  {this.props.children}\n          ) : null}\n        </View>\n      </TouchableHighlight>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: 48,\n    height: 48,\n    position: 'absolute',\n    bottom: 32,\n    right: 32,\n  },\n  circleButton: {\n    width: 48,\n    height: 48,\n    // margin: 8,\n    borderRadius: 24,\n    justifyContent: 'center',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 3,\n    // elevation: 4,\n  },\n  circleButtonTitle: {\n    // color: \"#fff\",\n    fontSize: 24,\n    // テキストを中央に配置するときはfontSizeとloneHeightを同じ値に設定する\n    lineHeight: 32,\n  },\n});\n\nexport default CircleButton;\n"]},"metadata":{},"sourceType":"module"}